import os
import glob

import numpy as np
import pytest

from pybmt.callback.movement_callback import MovementCallback
from pybmt.fictrac.driver import FicTracDriver

@pytest.fixture(autouse=True)
def run_around_tests():

    # Shouldn't need to set anything up

    # Run the a test
    yield

    # Cleanup any files that go generated by running fictrac
    os.remove('tests/fictrac/test_config_data/output.txt')
    for fl in glob.glob('tests/fictrac/test_config_data/*.log'):
        os.remove(fl)
    for fl in glob.glob('tests/fictrac/test_config_data/*.dat'):
        os.remove(fl)
    os.remove('tests/fictrac/test_config_data/test-template.png')

def check_test_run_file_output():

    # Lets make sure we got an output log file
    log_files = glob.glob('tests/fictrac/test_config_data/*.log')
    assert (len(log_files) == 1)
    log_file = log_files[0]

    # A data file too
    data_files = glob.glob('tests/fictrac/test_config_data/*.dat')
    assert (len(data_files) == 1)
    data_file = data_files[0]

    # Console output and image template as well
    assert(os.path.isfile('tests/fictrac/test_config_data/output.txt'))
    assert(os.path.isfile('tests/fictrac/test_config_data/test-template.png'))

    # Now, lets load the data file and make sure some things are correct. We don't need to check for
    # and exact match because different video codes onc different systems might produce slightly
    # different results.
    data = np.loadtxt(data_file, delimiter=",")

    # Load the ground truth data
    true_data = np.loadtxt('tests/fictrac/test_config_data/output_file_ground_truth/test.dat', delimiter=",")

    # Lets make sure we get a frame number for each frame
    assert(np.array_equal(data[:,0], true_data[:,0]))

def test_driver_local():
    fictrac_config = "tests/fictrac/test_config_data/test_config_local.txt"
    fictrac_console_out = "tests/fictrac/test_config_data/output.txt"

    # Instantiate the callback object that's methods are invoked when new tracking state is detected.
    callback = MovementCallback()

    # Instantiate a FicTracDriver object to handle running of FicTrac in the background and communication
    # of program state.
    tracDrv = FicTracDriver(config_file=fictrac_config, console_ouput_file=fictrac_console_out,
                            track_change_callback=callback, plot_on=False)

    # Disable average FPS check for this test.
    tracDrv.average_fps_threshold = 0

    # This will start FicTrac and it will block until complete.
    tracDrv.run()

    # Lets check that all the output files match
    check_test_run_file_output()

